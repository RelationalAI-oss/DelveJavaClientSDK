/*
 * Delve Client SDK
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.relationalai.client.api;

import com.relationalai.client.ApiException;
import com.relationalai.client.builder.*;
import com.relationalai.client.model.QueryActionResult;
import org.junit.Test;

import java.io.IOException;
import java.util.Arrays;

import static com.relationalai.test.ExtendedTestCase.*;

/**
 * API tests for DefaultApi
 */
public class IntegrationTestsCommons {

    /**
     * Issues a transaction to be executed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public static void transactionPostLocalTest(LocalConnection api) throws ApiException, IOException {
        assertTrue( api.createDatabase(true) );
        assertThrows( RuntimeException.class, () -> api.createDatabase(false) );

        SourceInstall src = SourceInstall.builder()
                .name("name")
                .path("")
                .value("def foo = 1")
                .build();

        assertNotNull( api.installSource(src) );

        Query query = Query.builder()
                .name("name")
                .path("name")
                .value("def bar = 2")
                .outputs(Arrays.asList("bar"))
                .build();

        QueryActionResult queryRes = api.query(query);
        assertNotNull( queryRes );
        System.out.println(queryRes);

        FileSyntaxCSV syntax = FileSyntaxCSV.builder()
                .header(Arrays.asList("A", "B", "C"))
                .delim(",")
                .build();

        FileSchemaCSV schema = FileSchemaCSV.builder()
                .types(Arrays.asList("Int64", "Int64", "Int64"))
                .build();

        DataLoader dataLoader = DataLoader.builder()
                .rel("csv")
                .data("A,B,C\n1,2,3\n4,5,6")
                .syntax(syntax)
                .schema(schema)
                .build();

         assertNotNull(api.loadCSV(dataLoader));
    }

    @Test
    public static void transactionPostCloudTest(CloudConnection api) throws ApiException, IOException {
        assertTrue( api.createDatabase(true) );
        assertThrows( RuntimeException.class, () -> api.createDatabase(false) );

        SourceInstall src = SourceInstall.builder()
                .name("name")
                .path("")
                .value("def foo = 1")
                .build();
        assertNotNull( api.installSource(src) );

        Query query = Query.builder()
                .name("name")
                .path("name")
                .value("def bar = 2")
                .outputs(Arrays.asList("bar"))
                .build();

        QueryActionResult queryRes = api.query(query);
        assertNotNull( queryRes );
        System.out.println(queryRes);

        FileSyntaxCSV syntax = FileSyntaxCSV.builder()
                .header(Arrays.asList("A", "B", "C"))
                .delim(",")
                .build();

        FileSchemaCSV schema = FileSchemaCSV.builder()
                .types(Arrays.asList("Int64", "Int64", "Int64"))
                .build();

        DataLoader dataLoader = DataLoader.builder()
                .rel("csv")
                .data("A,B,C\n1,2,3\n4,5,6")
                .syntax(syntax)
                .schema(schema)
                .build();

        assertNotNull(api.loadCSV(dataLoader));
    }


}
