/*
 * Delve Client SDK
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.relationalai.client.api;

import com.relationalai.client.ApiException;
import com.relationalai.client.builder.*;
import com.relationalai.client.model.PairAnyValueAnyValue;
import com.relationalai.client.model.RaiComputeSize;
import com.relationalai.client.model.RelKey;
import com.relationalai.client.model.Relation;
import com.relationalai.cloudclient.model.CreateComputeResponseProtocol;
import com.relationalai.cloudclient.model.ListComputesResponseProtocol;
import com.relationalai.infra.config.InfraMetadataConfig;

import java.io.IOException;
import java.util.*;

import static com.relationalai.test.ExtendedTestCase.*;

/**
 * API tests for DefaultApi
 */
public class IntegrationTestsCommons {

    /**
     * Issues a transaction to be executed
     *
     * @throws ApiException if the Api call fails
     */
    public static void transactionPostLocalTest(LocalConnection api) throws ApiException, IOException {
        // create database
        // ============================================================================
        assertTrue( api.createDatabase(true) );
        assertThrows( RuntimeException.class, () -> api.createDatabase(false) );

        // install source
        // =============================================================================
        InstallSourceArgs src = InstallSourceArgs.builder()
                .name("name")
                .path("")
                .value("def foo = 1")
                .build();

        assertNotNull( api.installSource(src) );

        QueryArgs queryArgs = QueryArgs.builder()
                .name("name")
                .path("name")
                .value("def bar = 2")
                .outputs(Arrays.asList("bar"))
                .build();

        Map<RelKey, Relation> queryRes = api.query(queryArgs);
        assertNotNull( queryRes );

        // load csv using syntax and schema
        // ==============================================================================
        CSVFileSyntaxArgs syntax = CSVFileSyntaxArgs.builder()
                .header(Arrays.asList("A", "B", "C"))
                .delim(",")
                .build();

        CSVFileSchemaArgs schema = CSVFileSchemaArgs.builder()
                .types(Arrays.asList("Int64", "Int64", "Int64"))
                .build();

        DataLoaderArgs dataLoaderArgs = DataLoaderArgs.builder()
                .rel("csv1")
                .data("A,B,C\n1,2,3\n4,5,6")
                .syntax(syntax)
                .schema(schema)
                .build();

        assertTrue(api.loadCSV(dataLoaderArgs));

        // load csv without syntax and schema
        DataLoaderArgs csvDataArgs = DataLoaderArgs.builder()
                .rel("csv2")
                .data("A,B\n1,2\n2,3")
                .build();

        assertTrue(api.loadCSV(csvDataArgs));
        // load Json
        // ================================================================================
        DataLoaderArgs jsonDataArgs = DataLoaderArgs.builder()
                .rel("json")
                .data("123")
                .build();

        assertTrue(api.loadJSON(jsonDataArgs));
        // load edb
        // ================================================================================
        assertTrue(api.loadEdb("edb", Arrays.asList(1, 2)));

        assertTrue(api.loadEdb("edb", Map.of(1, 'a', 2, 'b')));

        //delete source
        //==================================================================================
        assertTrue(api.deleteSource("name"));

        //delete edb
        //==================================================================================
        assertNotNull(api.deleteEdb("edb"));

        //list source
        //===================================================================================
        api.createDatabase(true);
        assertTrue(Arrays.asList("intrinsics", "stdlib", "ml").equals(new ArrayList<>(api.listSource().keySet())));

        // query
        // ==================================================================================
        QueryArgs queryArgs1 = QueryArgs.builder()
                .value("def foo = 3")
                .outputs(Arrays.asList("foo"))
                .build();
        RelKey relKey = new RelKey()
                .name("foo")
                .keys(Arrays.asList("Int64"))
                .values(new ArrayList<>());

        Relation relation = new Relation()
                .columns(Arrays.asList(Arrays.asList(3.0)))
                .relKey(relKey);

        assertTrue(new ArrayList<>(api.query(queryArgs1).values()).equals(Arrays.asList(relation)));

        // update edb
        // ===================================================================================

        api.createDatabase(true);
        Map<Object, Object> columns = Map.of('a', 1, 'b', 2, 'c', 3);

         api.loadEdb("k", columns);

        List<PairAnyValueAnyValue> updates = new ArrayList<>();
        updates.add(new PairAnyValueAnyValue().first('a').second(+1));
        updates.add(new PairAnyValueAnyValue().first('b').second(+2));
        updates.add(new PairAnyValueAnyValue().first('c').second(-2));

        QueryArgs queryArgs2 = QueryArgs.builder()
                .outputs(Arrays.asList("k"))
                .build();

        RelKey relKey1 = (new ArrayList<RelKey>(api.query(queryArgs2).keySet())).get(0);

        assertTrue(api.updateEdb(relKey1, updates, null));

        // enable library
        // ====================================================================================
        api.createDatabase(true);
        api.enableLibrary("stdlib");

        // cardinality
        // ====================================================================================
        api.createDatabase(true);
        DataLoaderArgs csvDataArgs1 = DataLoaderArgs.builder()
                .rel("csv")
                .data("A,B\n1,2\n2,3")
                .build();

        api.loadCSV(csvDataArgs1);
        assertTrue(api.cardinality("csv").size() == 3);
    }

    public static void transactionPostCloudTest(CloudConnection api) throws ApiException, IOException {
        assertTrue( api.createDatabase(true) );
        assertThrows( ApiException.class, () -> api.createDatabase(false) );

        InstallSourceArgs src = InstallSourceArgs.builder()
                .name("name")
                .path("")
                .value("def foo = 1")
                .build();
        assertNotNull( api.installSource(src) );

        QueryArgs queryArgs = QueryArgs.builder()
                .name("name")
                .path("name")
                .value("def bar = 2")
                .outputs(Arrays.asList("bar"))
                .build();

        Map<RelKey, Relation> queryRes = api.query(queryArgs);
        assertNotNull( queryRes );
        System.out.println(queryRes);

        CSVFileSyntaxArgs syntax = CSVFileSyntaxArgs.builder()
                .header(Arrays.asList("A", "B", "C"))
                .delim(",")
                .build();

        CSVFileSchemaArgs schema = CSVFileSchemaArgs.builder()
                .types(Arrays.asList("Int64", "Int64", "Int64"))
                .build();

        DataLoaderArgs dataLoaderArgs = DataLoaderArgs.builder()
                .rel("csv")
                .data("A,B,C\n1,2,3\n4,5,6")
                .syntax(syntax)
                .schema(schema)
                .build();

        assertNotNull(api.loadCSV(dataLoaderArgs));

    }

    public static String randomString() {
        int leftLimit = 97; // letter 'a'
        int rightLimit = 122; // letter 'z'
        int targetStringLength = 10;
        Random random = new Random();

        String generatedString = random.ints(leftLimit, rightLimit + 1)
                .limit(targetStringLength)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();

        return generatedString;
    }

    public static void managementTests(ManagementConnection api) throws ApiException, IOException {
        ListComputesResponseProtocol res = api.listComputes();
        System.out.println(res);

        CreateComputeResponseProtocol cres = api.createCompute(randomString(), RaiComputeSize.XL, InfraMetadataConfig.RaiRegion.US_EAST);
        System.out.println(cres);
    }

}
