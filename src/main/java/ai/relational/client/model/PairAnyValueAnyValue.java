/*
 * Delve Client SDK
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.relational.client.model;

import java.util.Objects;
import java.util.Arrays;
import ai.relational.client.model.AnyValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PairAnyValueAnyValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PairAnyValueAnyValue {
  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private AnyValue first;

  public static final String SERIALIZED_NAME_SECOND = "second";
  @SerializedName(SERIALIZED_NAME_SECOND)
  private AnyValue second;

  /**
   * Gets or Sets objtp
   */
  @JsonAdapter(ObjtpEnum.Adapter.class)
  public enum ObjtpEnum {
    PAIR_ANYVALUE_ANYVALUE("Pair_AnyValue_AnyValue");

    private String value;

    ObjtpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjtpEnum fromValue(String value) {
      for (ObjtpEnum b : ObjtpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjtpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjtpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjtpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjtpEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJTP = "objtp";
  @SerializedName(SERIALIZED_NAME_OBJTP)
  private ObjtpEnum objtp = ObjtpEnum.PAIR_ANYVALUE_ANYVALUE;


  public PairAnyValueAnyValue first(AnyValue first) {
    
    this.first = first;
    return this;
  }

   /**
   * Get first
   * @return first
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnyValue getFirst() {
    return first;
  }


  public void setFirst(AnyValue first) {
    this.first = first;
  }


  public PairAnyValueAnyValue second(AnyValue second) {
    
    this.second = second;
    return this;
  }

   /**
   * Get second
   * @return second
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnyValue getSecond() {
    return second;
  }


  public void setSecond(AnyValue second) {
    this.second = second;
  }


  public PairAnyValueAnyValue objtp(ObjtpEnum objtp) {
    
    this.objtp = objtp;
    return this;
  }

   /**
   * Get objtp
   * @return objtp
  **/
  @ApiModelProperty(required = true, value = "")

  public ObjtpEnum getObjtp() {
    return objtp;
  }


  public void setObjtp(ObjtpEnum objtp) {
    this.objtp = objtp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PairAnyValueAnyValue pairAnyValueAnyValue = (PairAnyValueAnyValue) o;
    return Objects.equals(this.first, pairAnyValueAnyValue.first) &&
        Objects.equals(this.second, pairAnyValueAnyValue.second) &&
        Objects.equals(this.objtp, pairAnyValueAnyValue.objtp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(first, second, objtp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PairAnyValueAnyValue {\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    second: ").append(toIndentedString(second)).append("\n");
    sb.append("    objtp: ").append(toIndentedString(objtp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

