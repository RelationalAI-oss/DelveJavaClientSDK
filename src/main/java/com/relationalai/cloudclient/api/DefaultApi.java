/*
 * RAI Cloud SDK
 * This is a Client SDK for RAI Cloud
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.relationalai.cloudclient.api;

import com.relationalai.cloudclient.ApiCallback;
import com.relationalai.cloudclient.ApiClient;
import com.relationalai.cloudclient.ApiException;
import com.relationalai.cloudclient.ApiResponse;
import com.relationalai.cloudclient.Configuration;
import com.relationalai.cloudclient.Pair;
import com.relationalai.cloudclient.ProgressRequestBody;
import com.relationalai.cloudclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.relationalai.cloudclient.model.CreateComputeRequestProtocol;
import com.relationalai.cloudclient.model.CreateComputeResponseProtocol;
import com.relationalai.cloudclient.model.CreateUserRequestProtocol;
import com.relationalai.cloudclient.model.CreateUserResponseProtocol;
import com.relationalai.cloudclient.model.DeleteComputeRequestProtocol;
import com.relationalai.cloudclient.model.DeleteComputeResponseProtocol;
import com.relationalai.cloudclient.model.ListComputesResponseProtocol;
import com.relationalai.cloudclient.model.ListDatabasesResponseProtocol;
import com.relationalai.cloudclient.model.ListUsersResponseProtocol;
import com.relationalai.cloudclient.model.UpdateDatabaseRequestProtocol;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for computeDelete
     * @param deleteComputeRequestProtocol Compute to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute deletion status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeDeleteCall(DeleteComputeRequestProtocol deleteComputeRequestProtocol, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteComputeRequestProtocol;

        // create path and map variables
        String localVarPath = "/compute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeDeleteValidateBeforeCall(DeleteComputeRequestProtocol deleteComputeRequestProtocol, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deleteComputeRequestProtocol' is set
        if (deleteComputeRequestProtocol == null) {
            throw new ApiException("Missing the required parameter 'deleteComputeRequestProtocol' when calling computeDelete(Async)");
        }
        

        okhttp3.Call localVarCall = computeDeleteCall(deleteComputeRequestProtocol, _callback);
        return localVarCall;

    }

    /**
     * Delete compute
     * 
     * @param deleteComputeRequestProtocol Compute to be deleted (required)
     * @return DeleteComputeResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute deletion status </td><td>  -  </td></tr>
     </table>
     */
    public DeleteComputeResponseProtocol computeDelete(DeleteComputeRequestProtocol deleteComputeRequestProtocol) throws ApiException {
        ApiResponse<DeleteComputeResponseProtocol> localVarResp = computeDeleteWithHttpInfo(deleteComputeRequestProtocol);
        return localVarResp.getData();
    }

    /**
     * Delete compute
     * 
     * @param deleteComputeRequestProtocol Compute to be deleted (required)
     * @return ApiResponse&lt;DeleteComputeResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute deletion status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteComputeResponseProtocol> computeDeleteWithHttpInfo(DeleteComputeRequestProtocol deleteComputeRequestProtocol) throws ApiException {
        okhttp3.Call localVarCall = computeDeleteValidateBeforeCall(deleteComputeRequestProtocol, null);
        Type localVarReturnType = new TypeToken<DeleteComputeResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete compute (asynchronously)
     * 
     * @param deleteComputeRequestProtocol Compute to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute deletion status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeDeleteAsync(DeleteComputeRequestProtocol deleteComputeRequestProtocol, final ApiCallback<DeleteComputeResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeDeleteValidateBeforeCall(deleteComputeRequestProtocol, _callback);
        Type localVarReturnType = new TypeToken<DeleteComputeResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = computeGetCall(_callback);
        return localVarCall;

    }

    /**
     * List computes
     * 
     * @return ListComputesResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computes </td><td>  -  </td></tr>
     </table>
     */
    public ListComputesResponseProtocol computeGet() throws ApiException {
        ApiResponse<ListComputesResponseProtocol> localVarResp = computeGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List computes
     * 
     * @return ApiResponse&lt;ListComputesResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListComputesResponseProtocol> computeGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = computeGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListComputesResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List computes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeGetAsync(final ApiCallback<ListComputesResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListComputesResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computePut
     * @param createComputeRequestProtocol New compute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New compute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computePutCall(CreateComputeRequestProtocol createComputeRequestProtocol, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createComputeRequestProtocol;

        // create path and map variables
        String localVarPath = "/compute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computePutValidateBeforeCall(CreateComputeRequestProtocol createComputeRequestProtocol, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createComputeRequestProtocol' is set
        if (createComputeRequestProtocol == null) {
            throw new ApiException("Missing the required parameter 'createComputeRequestProtocol' when calling computePut(Async)");
        }
        

        okhttp3.Call localVarCall = computePutCall(createComputeRequestProtocol, _callback);
        return localVarCall;

    }

    /**
     * Create compute
     * 
     * @param createComputeRequestProtocol New compute (required)
     * @return CreateComputeResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New compute </td><td>  -  </td></tr>
     </table>
     */
    public CreateComputeResponseProtocol computePut(CreateComputeRequestProtocol createComputeRequestProtocol) throws ApiException {
        ApiResponse<CreateComputeResponseProtocol> localVarResp = computePutWithHttpInfo(createComputeRequestProtocol);
        return localVarResp.getData();
    }

    /**
     * Create compute
     * 
     * @param createComputeRequestProtocol New compute (required)
     * @return ApiResponse&lt;CreateComputeResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New compute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateComputeResponseProtocol> computePutWithHttpInfo(CreateComputeRequestProtocol createComputeRequestProtocol) throws ApiException {
        okhttp3.Call localVarCall = computePutValidateBeforeCall(createComputeRequestProtocol, null);
        Type localVarReturnType = new TypeToken<CreateComputeResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create compute (asynchronously)
     * 
     * @param createComputeRequestProtocol New compute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New compute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computePutAsync(CreateComputeRequestProtocol createComputeRequestProtocol, final ApiCallback<CreateComputeResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = computePutValidateBeforeCall(createComputeRequestProtocol, _callback);
        Type localVarReturnType = new TypeToken<CreateComputeResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Databases </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = databaseGetCall(_callback);
        return localVarCall;

    }

    /**
     * List databases
     * 
     * @return ListDatabasesResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Databases </td><td>  -  </td></tr>
     </table>
     */
    public ListDatabasesResponseProtocol databaseGet() throws ApiException {
        ApiResponse<ListDatabasesResponseProtocol> localVarResp = databaseGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List databases
     * 
     * @return ApiResponse&lt;ListDatabasesResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Databases </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDatabasesResponseProtocol> databaseGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = databaseGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListDatabasesResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List databases (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Databases </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseGetAsync(final ApiCallback<ListDatabasesResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListDatabasesResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePost
     * @param updateDatabaseRequestProtocol Database fields to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePostCall(UpdateDatabaseRequestProtocol updateDatabaseRequestProtocol, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateDatabaseRequestProtocol;

        // create path and map variables
        String localVarPath = "/database";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePostValidateBeforeCall(UpdateDatabaseRequestProtocol updateDatabaseRequestProtocol, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'updateDatabaseRequestProtocol' is set
        if (updateDatabaseRequestProtocol == null) {
            throw new ApiException("Missing the required parameter 'updateDatabaseRequestProtocol' when calling databasePost(Async)");
        }
        

        okhttp3.Call localVarCall = databasePostCall(updateDatabaseRequestProtocol, _callback);
        return localVarCall;

    }

    /**
     * Update database
     * 
     * @param updateDatabaseRequestProtocol Database fields to be updated (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database updated </td><td>  -  </td></tr>
     </table>
     */
    public void databasePost(UpdateDatabaseRequestProtocol updateDatabaseRequestProtocol) throws ApiException {
        databasePostWithHttpInfo(updateDatabaseRequestProtocol);
    }

    /**
     * Update database
     * 
     * @param updateDatabaseRequestProtocol Database fields to be updated (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databasePostWithHttpInfo(UpdateDatabaseRequestProtocol updateDatabaseRequestProtocol) throws ApiException {
        okhttp3.Call localVarCall = databasePostValidateBeforeCall(updateDatabaseRequestProtocol, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update database (asynchronously)
     * 
     * @param updateDatabaseRequestProtocol Database fields to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePostAsync(UpdateDatabaseRequestProtocol updateDatabaseRequestProtocol, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePostValidateBeforeCall(updateDatabaseRequestProtocol, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userGetCall(_callback);
        return localVarCall;

    }

    /**
     * List users
     * 
     * @return ListUsersResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersResponseProtocol userGet() throws ApiException {
        ApiResponse<ListUsersResponseProtocol> localVarResp = userGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List users
     * 
     * @return ApiResponse&lt;ListUsersResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsersResponseProtocol> userGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListUsersResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAsync(final ApiCallback<ListUsersResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListUsersResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPut
     * @param createUserRequestProtocol New user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPutCall(CreateUserRequestProtocol createUserRequestProtocol, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUserRequestProtocol;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPutValidateBeforeCall(CreateUserRequestProtocol createUserRequestProtocol, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUserRequestProtocol' is set
        if (createUserRequestProtocol == null) {
            throw new ApiException("Missing the required parameter 'createUserRequestProtocol' when calling userPut(Async)");
        }
        

        okhttp3.Call localVarCall = userPutCall(createUserRequestProtocol, _callback);
        return localVarCall;

    }

    /**
     * Create user
     * 
     * @param createUserRequestProtocol New user (required)
     * @return CreateUserResponseProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New user </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserResponseProtocol userPut(CreateUserRequestProtocol createUserRequestProtocol) throws ApiException {
        ApiResponse<CreateUserResponseProtocol> localVarResp = userPutWithHttpInfo(createUserRequestProtocol);
        return localVarResp.getData();
    }

    /**
     * Create user
     * 
     * @param createUserRequestProtocol New user (required)
     * @return ApiResponse&lt;CreateUserResponseProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserResponseProtocol> userPutWithHttpInfo(CreateUserRequestProtocol createUserRequestProtocol) throws ApiException {
        okhttp3.Call localVarCall = userPutValidateBeforeCall(createUserRequestProtocol, null);
        Type localVarReturnType = new TypeToken<CreateUserResponseProtocol>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create user (asynchronously)
     * 
     * @param createUserRequestProtocol New user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPutAsync(CreateUserRequestProtocol createUserRequestProtocol, final ApiCallback<CreateUserResponseProtocol> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPutValidateBeforeCall(createUserRequestProtocol, _callback);
        Type localVarReturnType = new TypeToken<CreateUserResponseProtocol>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
