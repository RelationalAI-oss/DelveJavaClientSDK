# This workflow will create a release on any version update

name: New Java SDK Release

on:
  push:
    branches:
      - master

jobs:

  doConditionalRelease:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Fetch Current Version
      id: fetch_current_version
      run: grep "^    <version>.*</version>" ./pom.xml | awk -F '[<>]' '/version/{print "::set-output name=current_version::v"$3}'

    - name: Show Current Version
      run: "echo current version: ${{ steps.fetch_current_version.outputs.current_version }}"

    - name: Fetch All Releases
      id: fetch_all_releases
      run: |
        RELEASES="$(curl -s https://api.github.com/repos/${{ github.repository }}/releases)"
        RELEASES="${RELEASES//'%'/'%25'}" # to escape the string and make it ready for `set-output`
        RELEASES="${RELEASES//$'\n'/'%0A'}"
        RELEASES="${RELEASES//$'\r'/'%0D'}"
        echo "::set-output name=all_releases::$RELEASES"

    - name: Show All Releases
      run: "echo all releases: ${{ join(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, ', ') }}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: ${{ !contains(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, steps.fetch_current_version.outputs.current_version) }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.fetch_current_version.outputs.current_version }}
        release_name: Release ${{ steps.fetch_current_version.outputs.current_version }}
        body: Delve C# Client SDK ${{ steps.fetch_current_version.outputs.current_version }}.
        draft: false
        prerelease: false

    # As we are using `GITHUB_TOKEN` for auth, this workflow does not trigger the `maven-publish` workflow, so we need to inline it below

    - name: Set up OpenJDK 12
      uses: actions/setup-java@v1
      if: ${{ !contains(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, steps.fetch_current_version.outputs.current_version) }}
      with:
        java-version: 12
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      if: ${{ !contains(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, steps.fetch_current_version.outputs.current_version) }}
      run: mvn -B package --file pom.xml

    - name: Upload Release Assets
      if: ${{ !contains(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, steps.fetch_current_version.outputs.current_version) }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag_name="${{ steps.fetch_current_version.outputs.current_version }}"
        hub release edit $(find . -type f -name "delve-java-client-sdk-*.jar" -printf "-a %p ") -m "" "$tag_name"

    - name: Publish to GitHub Packages Apache Maven
      if: ${{ !contains(fromJson(steps.fetch_all_releases.outputs.all_releases).*.tag_name, steps.fetch_current_version.outputs.current_version) }}
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}
